# 4-print_square.txt

=========================================================================
How To Use ``print_square(...)``` from 4-print_square.py
=========================================================================

This module defines a function that prints a square ``print_square(size)``

USAGE:
======

The square is printed using the ``#`` character.
``size`` defines the height and width of square

::
   >>> print_square = __import__('4-print_square').print_square
   >>> print_square(1)
   #

::
   >>> print_square(4)
   ####
   ####
   ####
   ####

::
   >>> print_square(10)
   ##########
   ##########
   ##########
   ##########
   ##########
   ##########
   ##########
   ##########
   ##########
   ##########

if ``size`` is 0, function prints nothing

::
   >>> print_square(0)
   

INVALID SIZE
=============

``size`` must be an integer else TypeError is raised.

::
   >>> print_square("string")
   Traceback (most recent call last):
   TypeError: size must be an integer

::
   >>> print_square(6.4)
   Traceback (most recent call last):
   TypeError: size must be an integer

::
   >>> print_square(None)
   Traceback (most recent call last):
   TypeError: size must be an integer

If ``size`` is less than 0, raise ValueError.

::
   >>> print_square(-3)
   Traceback (most recent call last):
   ValueError: size must be >= 0

Always pass a parameter to function otherwise TypeError is raised

::
   >>> print_square()
   Traceback (most recent call last):
   TypeError: print_square() missing 1 required positional argument: 'size'

Note that type-checking occurs before value-checking.

::
   >>> print_square(-7.5)
   Traceback (most recent call last):
   TypeError: size must be an integer
